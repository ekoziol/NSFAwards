install swirl
pinstall swirl
install.packages("swirl")
swirl
run swirl
library(lattice)
data(mtcars)
names(mtcars)
lattice(mpg~cyl)
xyplot(mpg~cyl)
xyplot(mpg~cyl, data = mtcars)
lineplot(mpg~cyl, data = mtcars)
xyplot(mpg~cyl, data = mtcars, type="l")
xyplot(mpg~cyl, data = mtcars)
xyplot(mpg~cyl, data = mtcars, alpha=0.5)
xyplot(mpg~cyl | hp, data = mtcars, alpha=0.5)
xyplot(mpg~hp | cyl, data = mtcars, alpha=0.5)
xyplot(mpg~hp | cyl * disp, data = mtcars, alpha=0.5)
?data
setwd("C:/Github/NSFAwards")
nsf <- read.csv("process/compiledNoText.csv")
install.packages("ggmap")
?geocode
library(ggmap)
?geocode
source('C:/Github/NSFAwards/process/dataClean.R')
setwd("C:/Github/NSFAwards/process")
source('C:/Github/NSFAwards/process/dataClean.R')
source('C:/Github/NSFAwards/process/dataClean.R')
source('C:/Github/NSFAwards/process/dataClean.R')
source('C:/Github/NSFAwards/process/dataClean.R')
source('~/.active-rstudio-document')
install.packages("zipcode")
library(zipcode)
data(zipcode)
View(zipcode)
?sapply
source('C:/Github/NSFAwards/process/dataClean.R')
source('C:/Github/NSFAwards/process/dataClean.R')
View(nsfd)
source('C:/Github/NSFAwards/process/dataClean.R')
View(nsfd)
source('C:/Github/NSFAwards/process/dataClean.R')
?write.csv
source('C:/Github/NSFAwards/process/dataClean.R')
str(nsfd)
zipcode[zipcode$zip == 19010, "latitude"]
zipcode[zipcode$zip == 19010, "latitude"]
?sapply
source('C:/Github/NSFAwards/process/dataClean.R')
str(nsfd)
source('~/.active-rstudio-document')
source('C:/Github/NSFAwards/process/dataClean.R')
str(nsfd)
source('C:/Github/NSFAwards/process/dataClean.R')
head(nsfd,1)
source('C:/Github/NSFAwards/process/dataClean.R')
source('C:/Github/NSFAwards/process/dataClean.R')
?apply
source('C:/Github/NSFAwards/process/dataClean.R')
source('C:/Github/NSFAwards/process/dataClean.R')
apply(nsfd$zip, 2, findLat)
apply(nsfd$zip,  findLat)
apply(nsfd$zip,  FUN=findLat)
apply(nsfd$zip, MARGIN=1. FUN=findLat)
apply(nsfd$zip, MARGIN=1, FUN=findLat)
?shape
shape(nsfd$zip)
?size
?dim
dim(nsfd$zip)
ncol(nsfd$zip)
ncols(nsfd$zip)
nrow(nsfd$zip)
summary(nsfd$zip)
str(zipcode)
str(nsf)
str(nsfd)
sapply(nsfd$zip, findLat)
?values
?value
t(sapply(nsfd$zip, findLat))
source('C:/Github/NSFAwards/process/dataClean.R')
source('C:/Github/NSFAwards/process/dataClean.R')
source('C:/Github/NSFAwards/process/dataClean.R')
View(nsfd)
nsdfd
nsfd
head(nsfd,10)
head(nsfd,10)[4,"lat"]
head(nsfd,10)[4,"lat"][2]
head(nsfd,10)[4,"lat"][1]
source('C:/Github/NSFAwards/process/dataClean.R')
head(nsfd,10)[4,"lat"]
str(nsfd)
source('~/.active-rstudio-document')
data(mtcars)
library(lattice)
library(ggplot2)
mtcars <- mtcars
View(mtcars)
qplot(mpg ~ cyl | hp, data= mtcars)
xylot(mpg ~ cyl | hp, data= mtcars)
xyplot(mpg ~ cyl | hp, data= mtcars)
xyplot(mpg ~ hp | cyl, data= mtcars)
mtcars[mtcars$cyl == 6,]
mtcars[mtcars$hp > 100,]
nsfd <- data.frame(nsfd)
head(nsfd,10)
nsfd[1,"lat"]
nsfd[1:3,"lat"]
nsfd[1:3,"long"]
nsfd[1:3,c("lat,long")]
nsfd[1:3,c("lat","long")]
?write.csv
write.csv(nsfd, "processedData.csv")
as.character(nsfd$lat)
str(nsfd)
nsf$lat <- as.character(nsfd$lat)
nsfd$lat <- as.character(nsfd$lat)
nsfd$long <- as.character(nsfd$long)
str(nsfd)
source('C:/Github/NSFAwards/process/dataClean.R')
setwd("C:/Github/NSFAwards")
library(ggmpa)
library(ggmap
)
map <- get_map(location = 'United States', zoom = 4)
gmap <- ggmap(map)
gmap
p <- ggplot(nsfd, aes(x=long, y=lat))
p + geom_point(aes(color=year, size=funds))
gmap
map <- get_map(location = 'United States', zoom = 3)
gmap <- ggmap(map)
gmap
map <- get_map(location = 'United States', zoom = 4)
gmap <- ggmap(map)
gmap
gmap +  p + geom_point(aes(color=year, size=funds))
gmap + geom_point(data = nsfd, aes(x=long, y=lat, color=year, size=funds))
map <- get_map(location = 'United States', zoom = 3.5)
?get_map
source('C:/Github/NSFAwards/dataExplore.R')
source('C:/Github/NSFAwards/dataExplore.R')
points
summary(nsfd)
nsfd[is.na(nsfd$lat)]
nsfd[is.na(nsfd$lat),]
zipcode[zipcode$zip == 90498]
source('C:/Github/NSFAwards/process/dataClean.R')
setwd("C:/Github/NSFAwards/process")
source('C:/Github/NSFAwards/process/dataClean.R')
setwd("C:/Github/NSFAwards")
source('C:/Github/NSFAwards/dataExplore.R')
points
source('C:/Github/NSFAwards/dataExplore.R')
source('C:/Github/NSFAwards/process/dataClean.R')
setwd("C:/Github/NSFAwards/process")
source('C:/Github/NSFAwards/process/dataClean.R')
setwd("C:/Github/NSFAwards")
source('C:/Github/NSFAwards/dataExplore.R')
points
gmap + geom_point(data = nsfd, aes(x=long, y=lat, color=year, size=funds))
str(nsfd)
source('C:/Github/NSFAwards/dataExplore.R')
points
?aes
?geom_point
str(nsfd)
source('C:/Github/NSFAwards/dataExplore.R')
?as.factor
source('C:/Github/NSFAwards/dataExplore.R')
points
?manipulate
?manipulate
library(manipulate)
?manipulate
manipulate(gmap + geom_point(data = nsfd[nsfd$year == x,], aes(x=long, y=lat, group=year, size=funds), na.rm=TRUE), x=slider(unique(nsfd$year[1],rev(nsfd$year)[1])))
nsfd$year <- as.numeric(nsfd$year)
manipulate(gmap + geom_point(data = nsfd[nsfd$year == x,], aes(x=long, y=lat, group=year, size=funds), na.rm=TRUE), x=slider(unique(nsfd$year[1],rev(nsfd$year)[1])))
manipulate(gmap + geom_point(data = nsfd[nsfd$year == x,], aes(x=long, y=lat, group=year, size=funds), na.rm=TRUE), x=slider(unique(nsfd$year[1]),rev(unique(nsfd$year)[1])))
unique(nsfd$year)
source('C:/Github/NSFAwards/dataExplore.R')
source('C:/Github/NSFAwards/dataExplore.R')
source('C:/Github/NSFAwards/dataExplore.R')
source('C:/Github/NSFAwards/dataExplore.R')
source('C:/Github/NSFAwards/server.R')
install.packages("shiny")
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
gmap + geom_point(data = nsfd[nsfd$year %in% c(y),], aes(x=long, y=lat, color=fundsMil, size=fundsMil), na.rm=TRUE)
y <- 2008
gmap + geom_point(data = nsfd[nsfd$year %in% c(y),], aes(x=long, y=lat, color=fundsMil, size=fundsMil), na.rm=TRUE)
View(zipcode)
"sadf " + "as"
?concat
?concatentat
?concatentate
findCity <- function(z){
cityState <- zipcode[zipcode$zip == z, c("city", "state")]
return(paste(c(cityState[1], cityState[2]), sep = " ,"))
}
findCity(00609)
z <- 00609
zipcode[zipcode$zip == z, c("city", "state")]
z <- "00609"
zipcode[zipcode$zip == z, c("city", "state")]
findCity <- function(z){
z <- as.character(z)
cityState <- zipcode[zipcode$zip == z, c("city", "state")]
return(paste(c(cityState[1], cityState[2]), sep = " ,"))
}
findCity(00609)
z
findCity(z)
z <- 00609
z <- as.character(z)
z
str(zipcode)
?paste
"00609"
z <- "00609"
findCity(z)
cityState
cityState <- zipcode[zipcode$zip == z, c("city", "state")]
cityState
cityState[1]
cityState[2]
cityState[2].value
value(cityState[2])
as.character(cityState[2])
as.factor(cityState[2])
paste(c(cityState[1], cityState[2]), sep = " ,")
paste(c(cityState[1], cityState[2]), sep = ",")
paste(c(cityState[1], cityState[2]), sep = ',')
cityState[2][1]
cityState[2][1][1]
?simplify2array
simplify2array(cityState)
cs <- simplify2array(cityState)
cs[1]
cs$city
cs[2]
paste(c(cs[1], cs[2]), sep = ',')
paste(cs[1], cs[2], sep = ',')
findCity <- function(z){
cityState <- zipcode[zipcode$zip == z, c("city", "state")]
return(paste(cityState[1], cityState[2], sep = " ,"))
}
findCity(z)
findCity <- function(z){
cityState <- zipcode[zipcode$zip == z, c("city", "state")]
return(paste(cityState[1], cityState[2], sep = ", "))
}
findCity()
findCity(z)
runApp()
runApp()
?get_map
?plotOutput
runApp()
map <- get_map(location = 'United States', zoom = 4)
save(map, "map.Rda")
save(map, file="map.Rda")
runApp()
?get_map
map <- get_map(location = 'United States', zoom = 4, maptype="satellite")
ggmap(map)
?getmap
?get_map
map <- get_map(location = 'United States', zoom = 4, maptype="hybrid"); ggmap(map)
map <- get_map(location = 'United States', zoom = 4, maptype="toner"); ggmap(map)
map <- get_map(location = 'United States', zoom = 4, maptype="watercolor"); ggmap(map)
map <- get_map(location = 'United States', zoom = 4, maptype="watercolour"); ggmap(map)
map <- get_map(location = 'United States', zoom = 4, maptype="satee;ote"); ggmap(map)
map <- get_map(location = 'United States', zoom = 4, maptype="hybrid"); ggmap(map)
map <- get_map(location = 'United States', zoom = 4, maptype="sattelite"); ggmap(map)
map <- get_map(location = 'United States', zoom = 4, maptype="satellite"); ggmap(map)
map <- get_map(location = 'United States', zoom = 4, maptype="terrain"); ggmap(map)
map <- get_map(location = 'United States', zoom = 4, maptype="roadmap"); ggmap(map)
map <- get_map(location = 'United States', zoom = 4, maptype="hybrid"); ggmap(map)
findTop10 <- function(y){
top <- head(nsfd[with(nsfd, order(-fundsMil)),c("zip", "fundsMil")], 10)
top$cityState <- sapply(top$zip, findCity)
return(top[,c("cityState", "fundsMil")])
}
findTop10(2008)
findTop10(2009)
findTop10(2010)
findTop10 <- function(y){
top <- head(nsfd[with(nsfd, order(-fundsMil)) & nsfd$year == y,c("zip", "fundsMil")], 10)
top$cityState <- sapply(top$zip, findCity)
return(top[,c("cityState", "fundsMil")])
}
findTop10(2010)
findTop10 <- function(y){
nsfdtemp <- nsfd[nsfd$year == y,]
top <- head(nsfdtemp[with(nsfdtemp, order(-fundsMil)),c("zip", "fundsMil")], 10)
top$cityState <- sapply(top$zip, findCity)
return(top[,c("cityState", "fundsMil")])
}
findTop10(2010)
findTop10(2009)
findTop10(2009findTop10 <- function(y){
nsfdtemp <- nsfd[nsfd$year == y,]
nsfd$cityState <- sapply(nsfd$zip, findCity)
findTop10 <- function(y){
nsfdtemp <- nsfd[nsfd$year == y,]
nsfd$cityState <- sapply(nsfd$zip, findCity)
nsfdtemp[length(nsfdtemp$cityState) > 0,]
head(nsfdtemp[with(nsfdtemp, order(-fundsMil)),c("cityState", "fundsMil")], 10)
return(head(nsfdtemp[with(nsfdtemp, order(-fundsMil)),c("cityState", "fundsMil")], 10))
}
findTop10(2009)
findTop10 <- function(y){
nsfdtemp <- nsfd[nsfd$year == y,]
nsfdtemp$cityState <- sapply(nsfd$zip, findCity)
nsfdtemp[length(nsfdtemp$cityState) > 0,]
head(nsfdtemp[with(nsfdtemp, order(-fundsMil)),c("cityState", "fundsMil")], 10)
return(head(nsfdtemp[with(nsfdtemp, order(-fundsMil)),c("cityState", "fundsMil")], 10))
}
findTop10(2009)
findTop10 <- function(y){
nsfdtemp <- nsfd[nsfd$year == y,]
nsfdtemp$cityState <- sapply(nsfd$zip, findCity)
nsfdtemp[!(is.na(nsfd$cityState)),]
head(nsfdtemp[with(nsfdtemp, order(-fundsMil)),c("cityState", "fundsMil")], 10)
return(head(nsfdt
}
findTop10 <- function(y){
nsfdtemp <- nsfd[nsfd$year == y,]
nsfdtemp$cityState <- sapply(nsfd$zip, findCity)
nsfdtemp[!(is.na(nsfd$cityState)),]
head(nsfdtemp[with(nsfdtemp, order(-fundsMil)),c("cityState", "fundsMil")], 10)
return(head(nsfdtemp[with(nsfdtemp, order(-fundsMil)),c("cityState", "fundsMil")], 10))
}
findTop10(2009)
findTop10 <- function(y){
nsfdtemp <- nsfd[nsfd$year == y,]
nsfdtemp$cityState <- sapply(nsfd$zip, findCity)
nsfdtemp[!(is.na(nsfdtemp$cityState)),]
top <- head(nsfdtemp[with(nsfdtemp, order(-fundsMil)),c("cityState", "fundsMil")], 10)
return(top)
}
findTop10(2009)
findTop10 <- function(y){
nsfdtemp <- nsfd[nsfd$year == y,]
nsfdtemp$cityState <- sapply(nsfdtemp$zip, findCity)
nsfdtemp[!(is.na(nsfdtemp$cityState)),]
top <- head(nsfdtemp[with(nsfdtemp, order(-fundsMil)),c("cityState", "fundsMil")], 10)
return(top)
}
findTop10(2009)
findTop10 <- function(y){
nsfdtemp <- nsfd[nsfd$year == y,]
nsfdtemp$cityState <- sapply(nsfdtemp$zip, findCity)
nsfdtemp[length(nsfdtemp$cityState)>0,]
top <- head(nsfdtemp[with(nsfdtemp, order(-fundsMil)),c("cityState", "fundsMil")], 10)
return(top)
}
findTop10(2009)
nsfdtemp
View(nsfdtemp)
nsfdtemp$cityState <- sapply(nsfdtemp$zip, findCity)
View(nsfdtemp)
findTop10 <- function(y){
nsfdtemp <- nsfd[nsfd$year == y,]
nsfdtemp$cityState <- sapply(nsfdtemp$zip, findCity)
nsfdtemp[!(nsfdtemp$cityState == "character(0), character(0)"),]
top <- head(nsfdtemp[with(nsfdtemp, order(-fundsMil)),c("cityState", "fundsMil")], 10)
return(top)
}
findTop10(2009)
findTop10(2009)$cityState[10]
str(findTop10(2009))
chr(0)
character(0)
character(0) + ", " + character(0)
findTop10 <- function(y){
nsfdtemp <- nsfd[nsfd$year == y,]
nsfdtemp$cityState <- sapply(nsfdtemp$zip, findCity)
nsfdtemp[!(nsfdtemp$cityState == paste(character(0), character(0), sep = ", ")),]
top <- head(nsfdtemp[with(nsfdtemp, order(-fundsMil)),c("cityState", "fundsMil")], 10)
return(top)
}
findTop10(2009)
paste(character(0), character(0), sep = ", ")
str(character(0))
paste(str(character(0)), str(character(0)), sep = ", ")
findTop10 <- function(y){
nsfdtemp <- nsfd[nsfd$year == y,]
nsfdtemp$cityState <- sapply(nsfdtemp$zip, findCity)
nsfdtemp[!(")" %in% nsfdtemp$cityState),]
top <- head(nsfdtemp[with(nsfdtemp, order(-fundsMil)),c("cityState", "fundsMil")], 10)
return(top)
}
findTop10(2009)
?read.csv
source('C:/Github/NSFAwards/server.R')
View(nsfdtemp)
View(nsfd)
View(zipcode)
str(zip)
str(zipcode)
str(nsfd)
str(nsfdtemp)
source('C:/Github/NSFAwards/server.R')
View(nsfdtemp)
View(nsfd)
head(nsfdtemp[nsfd$year == 2008 & with(nsfdtemp, order(-fundsMil)),c("cityState", "fundsMil")], 10)
head(nsfdtemp[with(nsfdtemp, order(-fundsMil)),c("cityState", "fundsMil")], 10)
head(nsfd[with(nsfd, order(-fundsMil)),c("cityState", "fundsMil")], 10)
source('C:/Github/NSFAwards/server.R')
View(nsfd)
findTop10 <- function(y){
nsfdtemp <- nsfd[nsfd$year == y,]
top <- head(nsfdtemp[with(nsfdtemp, order(-fundsMil)),c("cityState", "fundsMil")], 10)
return(top)
}
findTop10(2009)
runApp()
runApp()
runApp()
?dataTableOutput
runApp()
View(nsfdtemp)
View(nsfd)
write.csv(nsfd, file = "process/processedData")
runApp()
View(nsfd)
names(nsfd)
ntest <- read.csv("process/processedData")
View(ntest)
runApp()
runApp()
