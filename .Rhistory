?power.t.test
power.t.test(delta=0.01, sd=0.04, power=0.9)
power.t.test(delta=0.01, sd=0.04, power=0.9, alternative="one.sided")
power.t.test(delta=0.01, sd=0.04, power=0.9, alternative="one.sided", type = "one.sample")
power.t.test(delta=0.01, sd=0.04, n=100, alternative="one.sided", type = "one.sample")
upgrade()
source('D:/Github/HAR_Barbell/dataExplore.R')
setwd("D:/Github/HAR_Barbell")
source('D:/Github/HAR_Barbell/dataExplore.R')
load("D:/Github/HAR_Barbell/clf-rf.RData")
source('D:/Github/HAR_Barbell/dataExplore.R')
install.packages("randomForest")
source('D:/Github/HAR_Barbell/dataExplore.R')
install.packages("e1071")
source('D:/Github/HAR_Barbell/dataExplore.R')
source('D:/Github/HAR_Barbell/dataExplore.R')
source('D:/Github/HAR_Barbell/dataExplore.R')
qplot(cm)
summary(cm)
cm
?confusionMatrix
cm$Table
cm$table
qplot(cm$table)
image(cm$table)
names(cm$table)
names(cm)
cm$overall
cm$dots
load("D:/Github/HAR_Barbell/etc.RData")
heatmap(cm$table)
ggplot(cm$table) + geom_raster()
melt(cm$table)
library(plyr)
melt(cm$table)
library(ddply)
library(dply)
library(reshape2)
melt(cm$table)
qplot(melt(cm$table))
ggplot(melt(cm$table), aes(x=pred, y=yTest))
cmm <- melt(cm$table)
ggplot(melt(cm$table), aes(x=pred, y=yTest))
c,,
cmm
ggplot(cmm, aes(x=pred, y=yTest))
ggplot(cmm, aes(x=pred, y=yTest, fill=value))
ggplot(cmm, aes(x=pred, y=yTest)) + geom_tile(aes(fill=value))
names(cm)
cm$overall
cm$overall$accuracy
cm$overall[1]
Due to its historic success in prediction accuracy in low dimensional space, a random forest classifier was initially selected in order to predict the five classes.  While the approach is a bit of a black box and hard to interpret, the author's main goal was prediction accuracy.  The author believed that the prediction accuracy could be improved and thus switched to an Extra Trees Classifier, which is an even more randomized random forest.  The classifier was trained with the following code:
cm
install.packages("extraTrees")
source('D:/Github/HAR_Barbell/dataExplore.R')
load("etc.RData")
etc
pred <- predict(etc, testData)
etc
predict(etc, yTest)
predict(etc, testData)
View(testData)
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
update.packages("caret")
predict(etc, testData)
setwd("F:/dataScience/NSFAwards")
shiny::runApp()
shiny::runApp()
setwd("F:/dataScience/NSFAwards/process")
source('F:/dataScience/NSFAwards/process/dataClean.R')
source('F:/dataScience/NSFAwards/process/dataClean.R')
names(nsf)
nsf <- nsf[,-nsf$Unnamed..44]
source('F:/dataScience/NSFAwards/process/dataClean.R')
source('F:/dataScience/NSFAwards/process/dataClean.R')
source('F:/dataScience/NSFAwards/process/dataClean.R')
View(nsf)
nsf$Award.Date[1]
nsf$Award.Date <- as.Date(nsf$Award.Date)
?read.csv
source('F:/dataScience/NSFAwards/process/dataClean.R')
View(nsf)
View(nsf)
unique(nsf$Awardee.Country)
source('F:/dataScience/NSFAwards/process/dataClean.R')
View(nsf)
unique(nsf$Awardee.Country)
install.packages("ggmap")
usmap<-qmap(‘united states’, zoom=4, source=’osm’,extent=’panel’)
usmap<-qmap("united states", zoom=4, source=’osm’,extent=’panel’)
usmap<-qmap("united states", zoom=4, source="osm",extent="panel"")
""
usmap<-qmap("united states", zoom=4, source="osm",extent="panel")
library(ggmap)
usmap<-qmap("united states", zoom=4, source="osm",extent="panel")
usmap
mygggmap <- get_map(location = "United States", zoom = 4)
myggmap
mygggmap
g <- ggmap(myggmap)
g <- ggmap(mygggmap)
g
geocode(37996-003)
geocode(37996-0003)
geocode("37996-0003")
unique(nsf$Awardee.ZIP)
length(unique(nsf$Awardee.ZIP))
?sapply
?substring
?replace
x <- "ahad-\""
x
replace(x, c("-", "\""), "")
source('F:/dataScience/NSFAwards/process/dataClean.R')
nsf$Award.Start.Date <- sapply(nsf$Award.Start.Date, replace(list = c("=", "\""), values="") )
nsf$Award.Start.Date <- replace(nsf$Award.Start.Date,list = c("=", "\""), values=""
)
replace(nsf$Award.Start.Date,list = c("=", "\""), values="")
ndate3 <- as.Date(nsf$Award.Start.Date, "%m/%d/%Y")
ndate3
ndate3 <- as.Date(nsf$Award.Start.Date, "=\"%m/%d/%Y\"")
ndate3
source('F:/dataScience/NSFAwards/process/dataClean.R')
source('F:/dataScience/NSFAwards/process/dataClean.R')
View(nsf)
nsf$Funds.Obligated.to.Date <- as.numeric(sub("\\$","", nsf$Funds.Obligated.to.Date))
View(nsf)
?sub
nsf$Funds.Obligated.to.Date <- as.numeric(gsub("\\$","", nsf$Funds.Obligated.to.Date))
source('F:/dataScience/NSFAwards/process/dataClean.R')
View(nsf)
as.numeric(gsub("\\$","", nsf$Funds.Obligated.to.Date))
as.numeric(gsub(c("\\$", ","),"", nsf$Funds.Obligated.to.Date))
?gsub
?sub
gsub("([ab])", "\\1_\\1_", "abc and ABC")
as.numeric(gsub(["\\$",],"", nsf$Funds.Obligated.to.Date))
as.numeric(gsub(["\\$""",""],"", nsf$Funds.Obligated.to.Date))
as.numeric(gsub([$,],"", nsf$Funds.Obligated.to.Date))
as.numeric(gsub([$","],"", nsf$Funds.Obligated.to.Date))
as.numeric(gsub("([$,])","", nsf$Funds.Obligated.to.Date))
as.numeric(gsub("([\$,])","", nsf$Funds.Obligated.to.Date))
as.numeric(gsub("([$,])","", nsf$Funds.Obligated.to.Date))
as.numeric(gsub("($,)","", nsf$Funds.Obligated.to.Date))
as.numeric(gsub("[:punct:]","", nsf$Funds.Obligated.to.Date))
as.numeric(nsf$Funds.Obligated.to.Date)
?summary(nsf)
summary(nsf)
str(nsf)
?regexpr
regexpr("[:punct:]", nsf$Funds.Obligated.to.Date)
nsf$Funds.Obligated.to.Date[1] + nsf$Funds.Obligated.to.Date[2]
sub("\\$","",  nsf$Funds.Obligated.to.Date))
sub("\\$","",  nsf$Funds.Obligated.to.Date)
sub("(\\$,)","",  nsf$Funds.Obligated.to.Date)
sub("(,)","",  nsf$Funds.Obligated.to.Date)
as.numeric(sub("(\\$)","",  nsf$Funds.Obligated.to.Date)
)
source('F:/dataScience/NSFAwards/process/dataClean.R')
View(nsf)
source('F:/dataScience/NSFAwards/process/dataClean.R')
View(nsf)
nsf$Funds.Obligated.to.Date <- gsub("(\\=)","",  nsf$Funds.Obligated.to.Date)
View(nsf)
as.numeric(nsf$Funds.Obligated.to.Date)
nsf$Funds.Obligated.to.Date <- gsub("(\\")","",  nsf$Funds.Obligated.to.Date)
nsf$Funds.Obligated.to.Date <- gsub("(\")","",  nsf$Funds.Obligated.to.Date)
View(nsf)
nsf$Funds.Obligated.to.Date[1] + nsf$Funds.Obligated.to.Date[2]
source('F:/dataScience/NSFAwards/process/dataClean.R')
View(nsf)
source('F:/dataScience/NSFAwards/process/dataClean.R')
View(testData)
View(nsf)
nsf$Funds.Obligated.to.Date <- gsub("(\=)","",  nsf$Funds.Obligated.to.Date)
nsf$Funds.Obligated.to.Date <- gsub("(\\
=)","",  nsf$Funds.Obligated.to.Date)
View(nsf)
source('F:/dataScience/NSFAwards/process/dataClean.R')
View(nsf)
as.numeric(nsf$Funds.Obligated.to.Date)
?dcast
?melt
source('F:/dataScience/NSFAwards/process/dataClean.R')
View(testData)
View(nsfmelt)
View(nsfmelt)
nsfmelt <- melt(nsf, id = "Awardee.ZIP", value.name = c("Award.Start.Date, "Funds.Obligated.to.Date"))
nsfmelt <- melt(nsf, id = "Awardee.ZIP", value.name = c("Award.Start.Date", "Funds.Obligated.to.Date"))
nsfmelt <- melt(nsf, id = "Awardee.ZIP")
View(nsfmelt)
unique(nsfmelt)
unique(nsfmelt$variable)
nsfmelt$value[1]
as.Date(nsfmelt$value[1])
Date(nsfmelt$value[1])
nsfmelt <- melt(nsf, id.vars = "Awardee.ZIP", measure.vars = c("Award.Start.Date", "Funds.Obligated.to.Date"))
View(nsfmelt)
View(nsf)
View(nsfmelt)
View(nsf)
str(nsf)
str(nsfmelt)
str(nsfmelt[nsfmelt$variable == "Award.Start.Date"])
str(nsfmelt[nsfmelt$variable == "Award.Start.Date", "variable"])
?substring
nsf$Award.Start.Date <- substring(nsf$Award.Start.Date,1,4)
View(nsf)
nsf$Award.Start.Date <- as.numeric(substring(nsf$Award.Start.Date,1,4))
View(nsf)
names(nsf)
source('F:/dataScience/NSFAwards/process/dataClean.R')
View(nsfmelt)
?dcast
source('F:/dataScience/NSFAwards/process/dataClean.R')
source('F:/dataScience/NSFAwards/process/dataClean.R')
View(nsfmelt)
nsfd <- dcast(nsfmelt, year + zip ~ variable)
nsfd <- dcast(nsfmelt, year + zip ~ variable, sum)
View(nsfd)
geocode("60030")
source('F:/dataScience/NSFAwards/process/dataClean.R')
View(nsfmelt)
source('F:/dataScience/NSFAwards/process/dataClean.R')
View(nsfd)
geocode("60030")$lat
nsfd$lat <- sapply(nsfd$zip, geocode()$lat)
nsfd$lat <- sapply(nsfd$zip, geocode
)
View(nsfd)
?geocode
?geocode
setwd("F:/dataScience/NSFAwards")
dataExplore.R
dataExplore
ggmap("ggmapTemp.png")
get_map("ggmapTemp.png")
library(ggmap)
ggmap("ggmapTemp.png")
?get_map
?loadmap
?load_map
load("ggmapTemp.png")
map <- get_map(location = 'United States', zoom = 4, color='bw')
runApp()
map <- load("nsf-map.Rda")
gmap <- ggmap(map)
?ls
map <- load("map.Rda")
ggmap(map)
ggmap(get_map(map))
?ggimage
ggimage(map)
